/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __READ3_BPF_SKEL_H__
#define __READ3_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct read3_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *output;
		struct bpf_map *my_config;
		struct bpf_map *data;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *fentry_ksys_read;
	} progs;
	struct {
		struct bpf_link *fentry_ksys_read;
	} links;
	struct read3_bpf__data {
		char messgae[20];
	} *data;

#ifdef __cplusplus
	static inline struct read3_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct read3_bpf *open_and_load();
	static inline int load(struct read3_bpf *skel);
	static inline int attach(struct read3_bpf *skel);
	static inline void detach(struct read3_bpf *skel);
	static inline void destroy(struct read3_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
read3_bpf__destroy(struct read3_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
read3_bpf__create_skeleton(struct read3_bpf *obj);

static inline struct read3_bpf *
read3_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct read3_bpf *obj;
	int err;

	obj = (struct read3_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = read3_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	read3_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct read3_bpf *
read3_bpf__open(void)
{
	return read3_bpf__open_opts(NULL);
}

static inline int
read3_bpf__load(struct read3_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct read3_bpf *
read3_bpf__open_and_load(void)
{
	struct read3_bpf *obj;
	int err;

	obj = read3_bpf__open();
	if (!obj)
		return NULL;
	err = read3_bpf__load(obj);
	if (err) {
		read3_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
read3_bpf__attach(struct read3_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
read3_bpf__detach(struct read3_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *read3_bpf__elf_bytes(size_t *sz);

static inline int
read3_bpf__create_skeleton(struct read3_bpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "read3_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 4;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "output";
	map->map = &obj->maps.output;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 1 * s->map_skel_sz);
	map->name = "my_config";
	map->map = &obj->maps.my_config;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 2 * s->map_skel_sz);
	map->name = "read3_bp.data";
	map->map = &obj->maps.data;
	map->mmaped = (void **)&obj->data;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 3 * s->map_skel_sz);
	map->name = "read3_bp.rodata";
	map->map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "fentry_ksys_read";
	s->progs[0].prog = &obj->progs.fentry_ksys_read;
	s->progs[0].link = &obj->links.fentry_ksys_read;

	s->data = read3_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *read3_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0f\0\x01\
\0\xbf\x16\0\0\0\0\0\0\x79\x67\x10\0\0\0\0\0\x79\x68\0\0\0\0\0\0\xb7\x01\0\0\0\
\0\0\0\x63\x1a\xf8\xff\0\0\0\0\x7b\x1a\xf0\xff\0\0\0\0\x7b\x1a\xe8\xff\0\0\0\0\
\x7b\x1a\xe0\xff\0\0\0\0\x7b\x1a\xd8\xff\0\0\0\0\x7b\x1a\xd0\xff\0\0\0\0\x7b\
\x1a\xc8\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xe0\xff\xff\xff\xb7\x02\0\
\0\x0c\0\0\0\x18\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x71\0\0\0\x85\0\0\0\
\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x63\x0a\xc8\xff\0\0\0\0\x85\0\0\0\x0f\0\0\0\x63\
\x0a\xcc\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xd0\xff\xff\xff\xb7\x02\0\
\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\x61\xa1\xcc\xff\0\0\0\0\x15\x01\x11\0\0\0\0\0\
\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x17\0\0\0\x18\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xbf\x84\0\0\0\0\0\0\xbf\x75\0\0\0\0\0\0\x85\0\0\0\x06\0\0\0\
\xbf\xa4\0\0\0\0\0\0\x07\x04\0\0\xc8\xff\xff\xff\xbf\x61\0\0\0\0\0\0\x18\x02\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x03\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xb7\x05\
\0\0\x34\0\0\0\x85\0\0\0\x19\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x68\x65\
\x6c\x6c\x6f\x2c\x20\x69\x73\x20\x6b\x73\x79\x73\x5f\x72\x65\x61\x64\0\x44\x75\
\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x25\x73\x3a\x20\x66\x64\x3a\x20\x25\x64\x2c\x20\x63\x6f\x75\x6e\
\x74\x3a\x20\x25\x6c\x64\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xc4\x02\0\0\xc4\
\x02\0\0\x37\x04\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\
\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x04\0\0\0\x05\0\0\0\
\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\x04\x18\0\0\0\x19\0\0\0\x01\0\0\
\0\0\0\0\0\x1e\0\0\0\x01\0\0\0\x40\0\0\0\x27\0\0\0\x01\0\0\0\x80\0\0\0\x32\0\0\
\0\0\0\0\x0e\x05\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x08\0\0\0\0\0\0\0\0\0\0\x03\
\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\0\0\0\0\0\0\
\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\x39\0\
\0\0\0\0\0\x08\x0d\0\0\0\x3d\0\0\0\0\0\0\x08\x0e\0\0\0\x43\0\0\0\0\0\0\x01\x04\
\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x10\0\0\0\x50\0\0\0\x01\0\0\x04\x0c\0\0\0\
\x56\0\0\0\x12\0\0\0\0\0\0\0\x5e\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\
\0\0\0\x03\0\0\0\0\x11\0\0\0\x04\0\0\0\x0c\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\
\x19\0\0\0\x07\0\0\0\0\0\0\0\x63\0\0\0\x09\0\0\0\x40\0\0\0\x6f\0\0\0\x0b\0\0\0\
\x80\0\0\0\x73\0\0\0\x0f\0\0\0\xc0\0\0\0\x79\0\0\0\0\0\0\x0e\x13\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\x02\x16\0\0\0\x83\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\
\x01\0\0\x0d\x02\0\0\0\x96\0\0\0\x15\0\0\0\x9a\0\0\0\x01\0\0\x0c\x17\0\0\0\0\0\
\0\0\0\0\0\x03\0\0\0\0\x11\0\0\0\x04\0\0\0\x14\0\0\0\xee\x03\0\0\0\0\0\x0e\x19\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x11\0\0\0\x04\0\0\0\x0d\0\0\0\xf6\
\x03\0\0\0\0\0\x0e\x1b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x11\0\0\0\0\0\0\0\0\0\
\0\x03\0\0\0\0\x1d\0\0\0\x04\0\0\0\x17\0\0\0\xfe\x03\0\0\0\0\0\x0e\x1e\0\0\0\0\
\0\0\0\x1b\x04\0\0\x01\0\0\x0f\0\0\0\0\x1a\0\0\0\0\0\0\0\x14\0\0\0\x21\x04\0\0\
\x02\0\0\x0f\0\0\0\0\x06\0\0\0\0\0\0\0\x18\0\0\0\x14\0\0\0\0\0\0\0\x20\0\0\0\
\x27\x04\0\0\x01\0\0\x0f\0\0\0\0\x1f\0\0\0\0\0\0\0\x17\0\0\0\x2f\x04\0\0\x01\0\
\0\x0f\0\0\0\0\x1c\0\0\0\0\0\0\0\x0d\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\
\x6b\x65\x79\x5f\x73\x69\x7a\x65\0\x76\x61\x6c\x75\x65\x5f\x73\x69\x7a\x65\0\
\x6f\x75\x74\x70\x75\x74\0\x75\x33\x32\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x6d\x73\x67\x5f\x74\0\x6d\x65\x73\x73\x61\
\x67\x65\0\x63\x68\x61\x72\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\
\x65\x79\0\x76\x61\x6c\x75\x65\0\x6d\x79\x5f\x63\x6f\x6e\x66\x69\x67\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\
\0\x66\x65\x6e\x74\x72\x79\x5f\x6b\x73\x79\x73\x5f\x72\x65\x61\x64\0\x66\x65\
\x6e\x74\x72\x79\x2f\x6b\x73\x79\x73\x5f\x72\x65\x61\x64\0\x2f\x72\x6f\x6f\x74\
\x2f\x68\x7a\x68\x64\x61\x74\x61\x2f\x37\x2d\x65\x62\x70\x66\x2d\x6c\x65\x61\
\x72\x6e\x69\x6e\x67\x2f\x37\x2d\x70\x72\x6f\x67\x72\x61\x6d\x2f\x70\x72\x61\
\x63\x74\x69\x63\x65\x2f\x72\x65\x61\x64\x33\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\
\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x66\x65\x6e\x74\x72\x79\x5f\x6b\
\x73\x79\x73\x5f\x72\x65\x61\x64\x2c\x20\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\
\x69\x6e\x74\x20\x66\x64\x2c\x20\x76\x6f\x69\x64\x20\x2a\x62\x75\x66\x2c\x20\
\x73\x69\x7a\x65\x5f\x74\x20\x63\x6f\x75\x6e\x74\x29\0\x20\x20\x20\x20\x73\x74\
\x72\x75\x63\x74\x20\x64\x61\x74\x61\x5f\x74\x20\x64\x61\x74\x61\x20\x3d\x20\
\x7b\x7d\x3b\0\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x6f\x62\x65\x5f\x72\x65\
\x61\x64\x5f\x6b\x65\x72\x6e\x65\x6c\x28\x26\x64\x61\x74\x61\x2e\x6d\x65\x73\
\x73\x61\x67\x65\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x64\x61\x74\x61\x2e\x6d\
\x65\x73\x73\x61\x67\x65\x29\x2c\x20\x6d\x65\x73\x73\x67\x61\x65\x29\x3b\0\x20\
\x20\x20\x20\x64\x61\x74\x61\x2e\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\
\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\
\x28\x29\x20\x3e\x3e\x20\x33\x32\x3b\x20\x20\x2f\x2f\x20\xe8\x8e\xb7\xe5\x8f\
\x96\xe5\xbd\x93\xe5\x89\x8d\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\x20\x50\x49\
\x44\x2c\x20\xe5\x90\x8e\x33\x32\xe4\xbd\x8d\xe6\x98\xaf\xe7\xba\xbf\xe7\xa8\
\x8b\x20\x49\x44\x2d\x70\x69\x64\x2c\x20\xe5\x89\x8d\x33\x32\xe4\xbd\x8d\xe6\
\x98\xaf\xe8\xbf\x9b\xe7\xa8\x8b\x20\x49\x44\x2d\x74\x69\x64\0\x20\x20\x20\x20\
\x64\x61\x74\x61\x2e\x75\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\
\x63\x75\x72\x72\x65\x6e\x74\x5f\x75\x69\x64\x5f\x67\x69\x64\x28\x29\x20\x26\
\x20\x30\x78\x46\x46\x46\x46\x46\x46\x46\x46\x3b\x20\x2f\x2f\x20\xe8\x8e\xb7\
\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\x20\
\x55\x49\x44\x2c\x20\xe5\x89\x8d\x33\x32\xe4\xbd\x8d\xe6\x98\xaf\xe7\xbb\x84\
\x69\x64\x2d\x47\x49\x44\x2c\x20\xe5\x90\x8e\x33\x32\xe4\xbd\x8d\xe6\x98\xaf\
\xe7\x94\xa8\xe6\x88\xb7\x69\x64\x2d\x55\x49\x44\0\x20\x20\x20\x20\x62\x70\x66\
\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\x6d\x28\x26\
\x64\x61\x74\x61\x2e\x63\x6f\x6d\x6d\x61\x6e\x64\x2c\x20\x73\x69\x7a\x65\x6f\
\x66\x28\x64\x61\x74\x61\x2e\x63\x6f\x6d\x6d\x61\x6e\x64\x29\x29\x3b\x20\x2f\
\x2f\x20\xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe8\xbf\x9b\xe7\xa8\
\x8b\xe7\x9a\x84\xe5\x91\xbd\xe4\xbb\xa4\xe5\x90\x8d\0\x20\x20\x20\x20\x69\x66\
\x28\x64\x61\x74\x61\x2e\x75\x69\x64\x20\x3d\x3d\x20\x30\x29\x20\x7b\0\x20\x20\
\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x25\x73\x3a\x20\x66\
\x64\x3a\x20\x25\x64\x2c\x20\x63\x6f\x75\x6e\x74\x3a\x20\x25\x6c\x64\x22\x2c\
\x20\x6d\x65\x73\x73\x67\x61\x65\x2c\x20\x66\x64\x2c\x20\x63\x6f\x75\x6e\x74\
\x29\x3b\x20\x2f\x2f\x20\xe6\x89\x93\xe5\x8d\xb0\xe8\xb0\x83\xe8\xaf\x95\xe4\
\xbf\xa1\xe6\x81\xaf\0\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x65\x72\x66\x5f\x65\
\x76\x65\x6e\x74\x5f\x6f\x75\x74\x70\x75\x74\x28\x63\x74\x78\x2c\x20\x26\x6f\
\x75\x74\x70\x75\x74\x2c\x20\x42\x50\x46\x5f\x46\x5f\x43\x55\x52\x52\x45\x4e\
\x54\x5f\x43\x50\x55\x2c\x20\x26\x64\x61\x74\x61\x2c\x20\x73\x69\x7a\x65\x6f\
\x66\x28\x64\x61\x74\x61\x29\x29\x3b\x20\x2f\x2f\x20\xe5\xb0\x86\xe6\x95\xb0\
\xe6\x8d\xae\xe8\xbe\x93\xe5\x87\xba\xe5\x88\xb0\x20\x70\x65\x72\x66\x20\x62\
\x75\x66\x66\x65\x72\0\x6d\x65\x73\x73\x67\x61\x65\0\x4c\x49\x43\x45\x4e\x53\
\x45\0\x5f\x5f\x5f\x5f\x66\x65\x6e\x74\x72\x79\x5f\x6b\x73\x79\x73\x5f\x72\x65\
\x61\x64\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x64\x61\x74\x61\0\x2e\x6d\x61\
\x70\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\0\x9f\
\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x1c\x01\0\0\x30\x01\0\0\0\0\0\
\0\x08\0\0\0\xab\0\0\0\x01\0\0\0\0\0\0\0\x18\0\0\0\x10\0\0\0\xab\0\0\0\x11\0\0\
\0\0\0\0\0\xbc\0\0\0\xf9\0\0\0\0\x60\0\0\x08\0\0\0\xbc\0\0\0\xf9\0\0\0\x05\x60\
\0\0\x20\0\0\0\xbc\0\0\0\x42\x01\0\0\x13\x68\0\0\x68\0\0\0\xbc\0\0\0\x5f\x01\0\
\0\x05\x70\0\0\x88\0\0\0\xbc\0\0\0\xa8\x01\0\0\x10\x78\0\0\x90\0\0\0\xbc\0\0\0\
\xa8\x01\0\0\x2b\x78\0\0\x98\0\0\0\xbc\0\0\0\xa8\x01\0\0\x0e\x78\0\0\xa0\0\0\0\
\xbc\0\0\0\x2b\x02\0\0\x10\x7c\0\0\xa8\0\0\0\xbc\0\0\0\x2b\x02\0\0\x0e\x7c\0\0\
\xb0\0\0\0\xbc\0\0\0\x42\x01\0\0\x13\x68\0\0\xc0\0\0\0\xbc\0\0\0\xae\x02\0\0\
\x05\x84\0\0\xd0\0\0\0\xbc\0\0\0\x0f\x03\0\0\x0d\x94\0\0\xd8\0\0\0\xbc\0\0\0\
\x0f\x03\0\0\x08\x94\0\0\xe0\0\0\0\xbc\0\0\0\x27\x03\0\0\x05\xa0\0\0\x28\x01\0\
\0\xbc\0\0\0\0\0\0\0\0\0\0\0\x30\x01\0\0\xbc\0\0\0\x7b\x03\0\0\x05\xa8\0\0\x68\
\x01\0\0\xbc\0\0\0\xf9\0\0\0\x05\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbb\0\0\
\0\0\0\x03\0\x68\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1b\0\0\0\x01\0\x08\0\0\0\0\0\
\0\0\0\0\x17\0\0\0\0\0\0\0\0\0\0\0\x03\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x66\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x78\x01\0\0\0\0\0\0\x5e\0\0\0\x11\0\x05\
\0\0\0\0\0\0\0\0\0\x14\0\0\0\0\0\0\0\x14\0\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x18\
\0\0\0\0\0\0\0\xb3\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x4c\0\0\
\0\x11\0\x07\0\x18\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x01\0\0\0\
\x06\0\0\0\xe0\0\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\xf8\0\0\0\0\0\0\0\x01\0\0\0\
\x06\0\0\0\x38\x01\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x80\x02\0\0\0\0\0\0\x04\0\0\
\0\x06\0\0\0\x98\x02\0\0\0\0\0\0\x04\0\0\0\x07\0\0\0\xa4\x02\0\0\0\0\0\0\x04\0\
\0\0\x09\0\0\0\xbc\x02\0\0\0\0\0\0\x03\0\0\0\x04\0\0\0\xd4\x02\0\0\0\0\0\0\x04\
\0\0\0\x08\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\
\0\0\x01\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\
\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\xf0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\0\x01\0\0\0\0\0\0\x04\0\0\0\
\x01\0\0\0\x10\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x20\x01\0\0\0\0\0\0\x04\0\0\
\0\x01\0\0\0\x30\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x40\x01\0\0\0\0\0\0\x04\0\
\0\0\x01\0\0\0\x0e\x0f\x11\x10\x12\x04\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\
\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x6f\x75\x74\x70\x75\x74\0\x5f\x5f\x5f\x5f\
\x66\x65\x6e\x74\x72\x79\x5f\x6b\x73\x79\x73\x5f\x72\x65\x61\x64\x2e\x5f\x5f\
\x5f\x5f\x66\x6d\x74\0\x2e\x6d\x61\x70\x73\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\
\x64\x72\x73\x69\x67\0\x6d\x79\x5f\x63\x6f\x6e\x66\x69\x67\0\x6c\x69\x63\x65\
\x6e\x73\x65\0\x6d\x65\x73\x73\x67\x61\x65\0\x66\x65\x6e\x74\x72\x79\x5f\x6b\
\x73\x79\x73\x5f\x72\x65\x61\x64\0\x2e\x72\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\
\x6b\x73\x79\x73\x5f\x72\x65\x61\x64\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\
\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x64\x61\x74\x61\0\x2e\
\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\
\x5f\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8c\0\0\0\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3e\x0d\0\0\0\0\0\0\xc2\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x7b\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x40\0\0\0\0\0\0\0\x78\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x77\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x0b\0\0\
\0\0\0\0\x40\0\0\0\0\0\0\0\x0e\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\xa4\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x01\0\0\0\0\0\0\
\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x56\0\0\0\
\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcc\x01\0\0\0\0\0\0\x0d\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\x01\0\0\0\x03\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x01\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9c\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xae\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x30\x02\0\0\0\0\0\0\x13\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xaa\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x0b\0\0\
\0\0\0\0\x50\0\0\0\0\0\0\0\x0e\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x44\x09\0\0\0\0\0\0\
\x50\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\
\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x0c\0\0\0\0\0\0\x20\x01\0\0\
\0\0\0\0\x0e\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x3e\0\0\0\x03\
\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x38\x0d\0\0\0\0\0\0\x06\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\0\0\0\x02\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x0a\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\x01\0\0\0\
\x05\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct read3_bpf *read3_bpf::open(const struct bpf_object_open_opts *opts) { return read3_bpf__open_opts(opts); }
struct read3_bpf *read3_bpf::open_and_load() { return read3_bpf__open_and_load(); }
int read3_bpf::load(struct read3_bpf *skel) { return read3_bpf__load(skel); }
int read3_bpf::attach(struct read3_bpf *skel) { return read3_bpf__attach(skel); }
void read3_bpf::detach(struct read3_bpf *skel) { read3_bpf__detach(skel); }
void read3_bpf::destroy(struct read3_bpf *skel) { read3_bpf__destroy(skel); }
const void *read3_bpf::elf_bytes(size_t *sz) { return read3_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
read3_bpf__assert(struct read3_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->data->messgae) == 20, "unexpected size of 'messgae'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __READ3_BPF_SKEL_H__ */
